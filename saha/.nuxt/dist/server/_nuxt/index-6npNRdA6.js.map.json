{"file":"index-6npNRdA6.js","mappings":"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","names":[],"sources":["../../../../components/FolderTree.vue","../../../../components/ModalWindow.vue","../../../../node_modules/nuxt/dist/app/composables/asyncData.js","../../../../pages/index.vue"],"sourcesContent":["<template>\r\n\t<li class=\"w-[fit-content]\">\r\n\t\t<div class=\"flex gap-4 items-center\">\r\n\t\t\t<button\r\n\t\t\t\t@click=\"showFolders(folders.id)\"\r\n\t\t\t\tclass=\"cursor-pointer\"\r\n\t\t\t\t:class=\"{\r\n\t\t\t\t\t'text-green-500': isActive,\r\n\t\t\t\t\t'cursor-not-allowed': folders.children.length === 0,\r\n\t\t\t\t}\"\r\n\t\t\t>\r\n\t\t\t\t{{ folders.name }}\r\n\t\t\t</button>\r\n\t\t\t<button\r\n\t\t\t\t@click=\"toggleSelection\"\r\n\t\t\t\tclass=\"cursor-pointer text-[10px] p-2 bg-amber-400 rounded-lg\"\r\n\t\t\t\t:class=\"{ 'text-green-500': isActive }\"\r\n\t\t\t>\r\n\t\t\t\t{{\r\n\t\t\t\t\tactiveId && activeId === folders.id ? \"Отменить\" : \"Выбрать\"\r\n\t\t\t\t}}\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t\t<ul\r\n\t\t\tv-if=\"\r\n\t\t\t\tfoldersIdShow === props.folders.id &&\r\n\t\t\t\tfolders.children.length > 0\r\n\t\t\t\"\r\n\t\t\tclass=\"flex flex-col py-3 gap-2 px-5\"\r\n\t\t>\r\n\t\t\t<FolderTree\r\n\t\t\t\tv-for=\"child in folders.children\"\r\n\t\t\t\t:key=\"child.id\"\r\n\t\t\t\t:folders=\"child\"\r\n\t\t\t\t:activeId=\"activeId\"\r\n\t\t\t\t@select=\"emit('select', $event)\"\r\n\t\t\t/>\r\n\t\t</ul>\r\n\t</li>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed } from \"vue\";\r\nimport type { FolderTree } from \"~/types/types\";\r\n\r\nconst emit = defineEmits([\"select\", \"foldersIdShow\"]);\r\nconst props = defineProps({\r\n\tfolders: {\r\n\t\ttype: Object as () => FolderTree,\r\n\t\trequired: true,\r\n\t},\r\n\tactiveId: {\r\n\t\ttype: Number || null,\r\n\t},\r\n});\r\nconst foldersIdShow = ref<number | null>(null);\r\nconst isActive = computed(() => props.activeId === props.folders.id);\r\n\r\nconst showFolders = (foldersId: number) => {\r\n\tfoldersIdShow.value = foldersIdShow.value === foldersId ? null : foldersId;\r\n\temit(\"foldersIdShow\", foldersIdShow.value);\r\n};\r\nconst toggleSelection = () => {\r\n\temit(\r\n\t\t\"select\",\r\n\t\tisActive.value\r\n\t\t\t? { id: null, folders: null }\r\n\t\t\t: { id: props.folders.id, folder: props.folders }\r\n\t);\r\n};\r\n</script>\r\n","<template lang=\"html\">\n\t<div\n\t\tclass=\"flex justify-center items-center z-[9999] inset-0 bg-[rgba(0,0,0,0.3)] fixed\"\n\t>\n\t\t<div\n\t\t\t@click.stop\n\t\t\tclass=\"relative cursor-default w-[60vw] h-[80vh] bg-[rgb(255,255,255)] p-[1vw] border-8 border-gray-500 rounded-[1rem] shadow-[0_0_15px_10px_rgba(255,255,255,0.3)]\"\n\t\t>\n\t\t\t<h5>{{ props.title }}:</h5>\n\n\t\t\t<slot></slot>\n\n\t\t\t<button\n\t\t\t\tclass=\"absolute bottom-3 right-3 bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-700 mt-6\"\n\t\t\t\t@click=\"closeModal\"\n\t\t\t>\n\t\t\t\tЗакрыть\n\t\t\t</button>\n\t\t</div>\n\t</div>\n</template>\n\n<script setup lang=\"ts\">\nconst props = defineProps({\n\ttitle: {\n\t\ttype: String,\n\t\trequired: true,\n\t},\n});\nconst emit = defineEmits([\"update:closeWindow\"]);\n\nconst closeModal = () => {\n\temit(\"update:closeWindow\", false);\n};\n</script>\n","import { computed, getCurrentInstance, getCurrentScope, onBeforeMount, onScopeDispose, onServerPrefetch, onUnmounted, ref, shallowRef, toRef, unref, watch } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { toArray } from \"../utils.js\";\nimport { createError } from \"./error.js\";\nimport { onNuxtReady } from \"./ready.js\";\nimport { asyncDataDefaults, resetAsyncDataToUndefined } from \"#build/nuxt.config.mjs\";\nconst isDefer = (dedupe) => dedupe === \"defer\" || dedupe === false;\nexport function useAsyncData(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  let [key, _handler, options = {}] = args;\n  if (typeof key !== \"string\") {\n    throw new TypeError(\"[nuxt] [asyncData] key must be a string.\");\n  }\n  if (typeof _handler !== \"function\") {\n    throw new TypeError(\"[nuxt] [asyncData] handler must be a function.\");\n  }\n  const nuxtApp = useNuxtApp();\n  const handler = import.meta.client || !import.meta.prerender || !nuxtApp.ssrContext?._sharedPrerenderCache ? _handler : () => {\n    const value = nuxtApp.ssrContext._sharedPrerenderCache.get(key);\n    if (value) {\n      return value;\n    }\n    const promise = Promise.resolve().then(() => nuxtApp.runWithContext(_handler));\n    nuxtApp.ssrContext._sharedPrerenderCache.set(key, promise);\n    return promise;\n  };\n  const getDefault = () => asyncDataDefaults.value;\n  const getDefaultCachedData = () => nuxtApp.isHydrating ? nuxtApp.payload.data[key] : nuxtApp.static.data[key];\n  options.server = options.server ?? true;\n  options.default = options.default ?? getDefault;\n  options.getCachedData = options.getCachedData ?? getDefaultCachedData;\n  options.lazy = options.lazy ?? false;\n  options.immediate = options.immediate ?? true;\n  options.deep = options.deep ?? asyncDataDefaults.deep;\n  options.dedupe = options.dedupe ?? \"cancel\";\n  if (import.meta.dev && typeof options.dedupe === \"boolean\") {\n    console.warn(\"[nuxt] `boolean` values are deprecated for the `dedupe` option of `useAsyncData` and will be removed in the future. Use 'cancel' or 'defer' instead.\");\n  }\n  const initialCachedData = options.getCachedData(key, nuxtApp);\n  const hasCachedData = initialCachedData != null;\n  if (!nuxtApp._asyncData[key] || !options.immediate) {\n    nuxtApp.payload._errors[key] ??= asyncDataDefaults.errorValue;\n    const _ref = options.deep ? ref : shallowRef;\n    nuxtApp._asyncData[key] = {\n      data: _ref(hasCachedData ? initialCachedData : options.default()),\n      pending: ref(!hasCachedData),\n      error: toRef(nuxtApp.payload._errors, key),\n      status: ref(\"idle\"),\n      _default: options.default\n    };\n  }\n  const asyncData = { ...nuxtApp._asyncData[key] };\n  delete asyncData._default;\n  asyncData.refresh = asyncData.execute = (opts = {}) => {\n    if (nuxtApp._asyncDataPromises[key]) {\n      if (isDefer(opts.dedupe ?? options.dedupe)) {\n        return nuxtApp._asyncDataPromises[key];\n      }\n      nuxtApp._asyncDataPromises[key].cancelled = true;\n    }\n    if (opts._initial || nuxtApp.isHydrating && opts._initial !== false) {\n      const cachedData = opts._initial ? initialCachedData : options.getCachedData(key, nuxtApp);\n      if (cachedData != null) {\n        return Promise.resolve(cachedData);\n      }\n    }\n    asyncData.pending.value = true;\n    asyncData.status.value = \"pending\";\n    const promise = new Promise(\n      (resolve, reject) => {\n        try {\n          resolve(handler(nuxtApp));\n        } catch (err) {\n          reject(err);\n        }\n      }\n    ).then(async (_result) => {\n      if (promise.cancelled) {\n        return nuxtApp._asyncDataPromises[key];\n      }\n      let result = _result;\n      if (options.transform) {\n        result = await options.transform(_result);\n      }\n      if (options.pick) {\n        result = pick(result, options.pick);\n      }\n      if (import.meta.dev && import.meta.server && typeof result === \"undefined\") {\n        console.warn(`[nuxt] \\`${options._functionName || \"useAsyncData\"}\\` must return a value (it should not be \\`undefined\\`) or the request may be duplicated on the client side.`);\n      }\n      nuxtApp.payload.data[key] = result;\n      asyncData.data.value = result;\n      asyncData.error.value = asyncDataDefaults.errorValue;\n      asyncData.status.value = \"success\";\n    }).catch((error) => {\n      if (promise.cancelled) {\n        return nuxtApp._asyncDataPromises[key];\n      }\n      asyncData.error.value = createError(error);\n      asyncData.data.value = unref(options.default());\n      asyncData.status.value = \"error\";\n    }).finally(() => {\n      if (promise.cancelled) {\n        return;\n      }\n      asyncData.pending.value = false;\n      delete nuxtApp._asyncDataPromises[key];\n    });\n    nuxtApp._asyncDataPromises[key] = promise;\n    return nuxtApp._asyncDataPromises[key];\n  };\n  asyncData.clear = () => clearNuxtDataByKey(nuxtApp, key);\n  const initialFetch = () => asyncData.refresh({ _initial: true });\n  const fetchOnServer = options.server !== false && nuxtApp.payload.serverRendered;\n  if (import.meta.server && fetchOnServer && options.immediate) {\n    const promise = initialFetch();\n    if (getCurrentInstance()) {\n      onServerPrefetch(() => promise);\n    } else {\n      nuxtApp.hook(\"app:created\", async () => {\n        await promise;\n      });\n    }\n  }\n  if (import.meta.client) {\n    const instance = getCurrentInstance();\n    if (import.meta.dev && !nuxtApp.isHydrating && !nuxtApp._processingMiddleware && (!instance || instance?.isMounted)) {\n      console.warn(`[nuxt] [${options._functionName || \"useAsyncData\"}] Component is already mounted, please use $fetch instead. See https://nuxt.com/docs/getting-started/data-fetching`);\n    }\n    if (instance && !instance._nuxtOnBeforeMountCbs) {\n      instance._nuxtOnBeforeMountCbs = [];\n      const cbs = instance._nuxtOnBeforeMountCbs;\n      onBeforeMount(() => {\n        cbs.forEach((cb) => {\n          cb();\n        });\n        cbs.splice(0, cbs.length);\n      });\n      onUnmounted(() => cbs.splice(0, cbs.length));\n    }\n    if (fetchOnServer && nuxtApp.isHydrating && (asyncData.error.value || initialCachedData != null)) {\n      asyncData.pending.value = false;\n      asyncData.status.value = asyncData.error.value ? \"error\" : \"success\";\n    } else if (instance && (nuxtApp.payload.serverRendered && nuxtApp.isHydrating || options.lazy) && options.immediate) {\n      instance._nuxtOnBeforeMountCbs.push(initialFetch);\n    } else if (options.immediate) {\n      initialFetch();\n    }\n    const hasScope = getCurrentScope();\n    if (options.watch) {\n      const unsub = watch(options.watch, () => asyncData.refresh());\n      if (hasScope) {\n        onScopeDispose(unsub);\n      }\n    }\n    const off = nuxtApp.hook(\"app:data:refresh\", async (keys) => {\n      if (!keys || keys.includes(key)) {\n        await asyncData.refresh();\n      }\n    });\n    if (hasScope) {\n      onScopeDispose(off);\n    }\n  }\n  const asyncDataPromise = Promise.resolve(nuxtApp._asyncDataPromises[key]).then(() => asyncData);\n  Object.assign(asyncDataPromise, asyncData);\n  return asyncDataPromise;\n}\nexport function useLazyAsyncData(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  const [key, handler, options = {}] = args;\n  if (import.meta.dev && import.meta.client) {\n    options._functionName ||= \"useLazyAsyncData\";\n  }\n  return useAsyncData(key, handler, { ...options, lazy: true }, null);\n}\nexport function useNuxtData(key) {\n  const nuxtApp = useNuxtApp();\n  if (!(key in nuxtApp.payload.data)) {\n    nuxtApp.payload.data[key] = asyncDataDefaults.value;\n  }\n  return {\n    data: computed({\n      get() {\n        return nuxtApp._asyncData[key]?.data.value ?? nuxtApp.payload.data[key];\n      },\n      set(value) {\n        if (nuxtApp._asyncData[key]) {\n          nuxtApp._asyncData[key].data.value = value;\n        } else {\n          nuxtApp.payload.data[key] = value;\n        }\n      }\n    })\n  };\n}\nexport async function refreshNuxtData(keys) {\n  if (import.meta.server) {\n    return Promise.resolve();\n  }\n  await new Promise((resolve) => onNuxtReady(resolve));\n  const _keys = keys ? toArray(keys) : void 0;\n  await useNuxtApp().hooks.callHookParallel(\"app:data:refresh\", _keys);\n}\nexport function clearNuxtData(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.data);\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : toArray(keys);\n  for (const key of _keys) {\n    clearNuxtDataByKey(nuxtApp, key);\n  }\n}\nfunction clearNuxtDataByKey(nuxtApp, key) {\n  if (key in nuxtApp.payload.data) {\n    nuxtApp.payload.data[key] = void 0;\n  }\n  if (key in nuxtApp.payload._errors) {\n    nuxtApp.payload._errors[key] = asyncDataDefaults.errorValue;\n  }\n  if (nuxtApp._asyncData[key]) {\n    nuxtApp._asyncData[key].data.value = resetAsyncDataToUndefined ? void 0 : nuxtApp._asyncData[key]._default();\n    nuxtApp._asyncData[key].error.value = asyncDataDefaults.errorValue;\n    nuxtApp._asyncData[key].pending.value = false;\n    nuxtApp._asyncData[key].status.value = \"idle\";\n  }\n  if (key in nuxtApp._asyncDataPromises) {\n    if (nuxtApp._asyncDataPromises[key]) {\n      nuxtApp._asyncDataPromises[key].cancelled = true;\n    }\n    nuxtApp._asyncDataPromises[key] = void 0;\n  }\n}\nfunction pick(obj, keys) {\n  const newObj = {};\n  for (const key of keys) {\n    newObj[key] = obj[key];\n  }\n  return newObj;\n}\n","<template>\r\n\t<div class=\"flex flex-col items-center justify-center h-screen\">\r\n\t\t<button\r\n\t\t\tclass=\"bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-700\"\r\n\t\t\t@click=\"openModal\"\r\n\t\t>\r\n\t\t\tОткрыть\r\n\t\t</button>\r\n\t\t<div v-if=\"!isModalOpen && onDisplay\">\r\n\t\t\tВы выбрали:\r\n\t\t\t<div>\r\n\t\t\t\t<div>ID: {{ onDisplay.id }}</div>\r\n\t\t\t\t<div>Папка: {{ onDisplay.name }}</div>\r\n\t\t\t\t<div v-if=\"onDisplay.children.length > 0\">\r\n\t\t\t\t\tВложенные папки: {{ onDisplay.children }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<ModalWindow\r\n\t\t\tv-if=\"isModalOpen\"\r\n\t\t\t@update:closeWindow=\"closeModal\"\r\n\t\t\t:title=\"'Выберите папку'\"\r\n\t\t>\r\n\t\t\t<ul\r\n\t\t\t\tv-if=\"foldersData\"\r\n\t\t\t\tclass=\"flex flex-col overflow-scroll h-full not-scrollbar pl-5 py-1 gap-y-1 not-allocated\"\r\n\t\t\t>\r\n\t\t\t\t<FolderTree\r\n\t\t\t\t\tv-for=\"parent in foldersData\"\r\n\t\t\t\t\t:key=\"parent.id\"\r\n\t\t\t\t\t:folders=\"parent\"\r\n\t\t\t\t\t:activeId=\"activeFolderId\"\r\n\t\t\t\t\t@select=\"handleSelect\"\r\n\t\t\t\t/>\r\n\t\t\t</ul>\r\n\t\t</ModalWindow>\r\n\t</div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref } from \"vue\";\r\nimport ModalWindow from \"~/components/ModalWindow.vue\";\r\nimport { useRuntimeConfig, useAsyncData } from \"#imports\";\r\nimport type { FolderTree } from \"~/types/types\";\r\n\r\nconst config = useRuntimeConfig();\r\nconst isModalOpen = ref<boolean>(false);\r\nconst activeFolderId = ref<number | null>(null);\r\nconst onDisplay = ref<FolderTree | null>(null);\r\n\r\nconst { data: foldersData } = useAsyncData<FolderTree[] | null>(\r\n\t\"mockFolders\",\r\n\t() => {\r\n\t\t// eslint-disable-next-line no-undef\r\n\t\treturn $fetch(config.public.getURL);\r\n\t}\r\n);\r\n\r\nconst openModal = () => {\r\n\tisModalOpen.value = true;\r\n};\r\nconst closeModal = (close: boolean) => {\r\n\tisModalOpen.value = close;\r\n};\r\n\r\nconst handleSelect = (folder: {\r\n\tid: number | null;\r\n\tfolder: FolderTree | null;\r\n}) => {\r\n\tactiveFolderId.value = folder.id;\r\n\tonDisplay.value = folder.folder;\r\n};\r\n</script>\r\n"],"version":3}